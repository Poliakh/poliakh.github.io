"use strict";

// --Burger--
(function () {
  var treeLine = document.querySelector('.bline');
  document.querySelector('body').addEventListener('mouseup', menuHover);

  function menuHover(event) {
    if (event.target.closest('.burger') || event.target.closest('.menu')) {
      document.querySelector('.burger').classList.toggle('burgerActive');
      document.querySelector('.bline').classList.toggle('burgerLineAnimate');
      document.querySelector('.menu').classList.toggle('menuHover');
    }

    if (!event.target.closest('.burger')) {
      document.querySelector('.burger').classList.remove('burgerActive');
      document.querySelector('.bline').classList.remove('burgerLineAnimate');
      document.querySelector('.menu').classList.remove('menuHover');
    }
  }
})(); // --burger end--


function AjaxSelect(wrapElem, card) {
  var myCards = document.createDocumentFragment();
  var parentCards = document.querySelector(wrapElem);
  var elemCard = parentCards.querySelector(card);

  var showLoading = function showLoading(on) {
    var loader = document.querySelector('.loader');
    on ? loader.classList.remove('loaderHide') : loader.classList.add('loaderHide');
  };

  var checkStatus = function checkStatus(response) {
    if (response.ok) {
      return response.json();
    } else {
      showLoading(false);
      var error = new Error("Ошибка " + response.statusText);
      error.response = response;
      throw error;
    }
  };

  var createCard = function createCard(obj) {
    var newCard = elemCard.cloneNode(true);
    newCard.hidden = false;
    newCard.querySelector('.card__page').href = obj.gitpage;
    newCard.querySelector('.card__hub').href = obj.github;
    newCard.style.backgroundImage = "url(\"".concat(obj.preview, "\")");
    return newCard;
  };

  var parseJSON = function parseJSON(obj) {
    for (var key in obj) {
      myCards.appendChild(createCard(obj[key]));
    }

    showLoading(false);
    parentCards.appendChild(myCards);
  };

  this.load = function (url) {
    showLoading(true);

    while (parentCards.querySelector(card)) {
      parentCards.removeChild(parentCards.querySelector(card));
    }

    fetch(url).then(checkStatus).then(parseJSON).catch(function (error) {
      showLoading(false);
      alert('request failed', error);
    });
  };
} // look it https://gist.github.com/msmfsd/fca50ab095b795eb39739e8c4357a808


var ajaxSelect = new AjaxSelect('.cardWrap', '.card');
ajaxSelect.load('data.json'); //--wow--

new WOW().init();

function addDelayAnimation(parentCLass, targetClass, incremdelay, delay) {
  var listIcon = document.querySelector(parentCLass).querySelectorAll(targetClass);
  listIcon.forEach(function (element) {
    delay += incremdelay;
    element.getAttribute('data-wow-delay');
    element.dataset.wowDelay = delay + 's';
  });
}

addDelayAnimation('.social', '.fadeInUp', 0.2, 0);
addDelayAnimation('.contactlist', '.fadeInRight', 0.2, 0.8);
addDelayAnimation('.menu', '.wow', 0.2, 0.5);
addDelayAnimation('.cardWrap', '.card', 0.2, 0.5); //turn off animated navigation for items menu  if burger visible

(function () {
  var burger = document.querySelector(".burger");

  if (getComputedStyle(burger).visibility == 'visible') {
    var navItemList = document.querySelectorAll(".menu .wow");
    navItemList.forEach(function (elem) {
      elem.classList.remove('wow');
    });
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
