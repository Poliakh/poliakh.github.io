"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const todoData = [{
  label: 'Wake ip',
  done: true
}, {
  label: 'Drinck a coffee',
  done: false
}, {
  label: 'create todolist',
  done: false
}];
!localStorage.getItem(['todoData']) ? localStorage['todoData'] = JSON.stringify(todoData) : '';

class TodoApp {
  constructor(idTodo, clNameList, idItem, clsLabel, clsCheck) {
    _defineProperty(this, "getClearItem", id => {
      const item = document.getElementById(id);
      const newItem = item.cloneNode(true);
      item.parentElement.removeChild(item);
      newItem.removeAttribute('id');
      return newItem;
    });

    _defineProperty(this, "createItem", (_ref) => {
      let {
        label,
        done
      } = _ref;
      const todoItem = this.cleanItem.cloneNode(true);
      todoItem.querySelector('.item__label').innerHTML = label;
      let item = todoItem.querySelector(".".concat(this.clsCheck)).checked = done;
      return todoItem;
    });

    _defineProperty(this, "addItem", () => {
      this.todo.addEventListener('submit', e => {
        e.preventDefault();
        let value = document.forms.todos[0].value;

        if (value) {
          const data = {
            label: value,
            done: false
          };
          this.listItem.appendChild(this.createItem(data));
          document.querySelector('.form__input').value = '';
          this.setStorage();
        }
      });
    });

    _defineProperty(this, "changeStatus", () => {
      this.todo.addEventListener('change', () => {
        this.setStorage();
      });
    });

    _defineProperty(this, "removeItem", () => {
      this.listItem.addEventListener('click', (_ref2) => {
        let {
          target
        } = _ref2;

        if (target.closest('.delete')) {
          const selectedItem = target.closest('li');
          const children = this.listItem.querySelectorAll('li');
          children.forEach(item => {
            if (item === selectedItem) {
              this.listItem.removeChild(item);
              this.setStorage();
            }

            ;
          });
        }

        ;
      });
    });

    _defineProperty(this, "editItem", () => {
      this.listItem.addEventListener('click', (_ref3) => {
        let {
          target
        } = _ref3;

        if (target.closest('.edit')) {
          const parent = target.closest('.edit').parentElement,
                label = parent.querySelector('.item__label'),
                input = parent.querySelector('.ghost__input'),
                that = this;
          input.value = label.innerHTML;
          parent.classList.add('redact');
          input.focus();
          parent.addEventListener('click', action);
          parent.addEventListener('keyup', action);

          function action(_ref4) {
            let {
              target,
              key
            } = _ref4;

            if (target.closest('.ghost__btn-ok') || key === "Enter") {
              label.innerHTML = input.value;
              parent.classList.remove('redact');
              that.setStorage();
              removeEvent();
            }

            ;

            if (target.closest('.ghost__btn-cancel') || key === "Escape") {
              parent.classList.remove('redact');
              removeEvent();
            }

            ;
          }

          ;

          function removeEvent() {
            parent.removeEventListener('click', action);
            parent.removeEventListener('keyup', action);
          }

          ;
        }

        ;
      });
    });

    _defineProperty(this, "createData", () => {
      const list = Array.from(this.listItem.children);
      return list.map(item => {
        return {
          label: item.querySelector(".".concat(this.clsLabel)).innerHTML,
          done: item.querySelector(".".concat(this.clsCheck)).checked
        };
      });
    });

    _defineProperty(this, "setStorage", () => {
      const data = this.createData();
      localStorage[this.keyLocalSt] = JSON.stringify(data);
    });

    _defineProperty(this, "getStorage", () => {
      return localStorage.getItem([this.keyLocalSt]) ? JSON.parse(localStorage[this.keyLocalSt]) : '';
    });

    _defineProperty(this, "createList", () => {
      const dataList = this.getStorage(),
            listElements = document.createDocumentFragment();
      dataList.forEach(item => {
        listElements.appendChild(this.createItem(item));
      });
      this.listItem.appendChild(listElements);
    });

    this.todo = document.getElementById(idTodo);
    this.listItem = this.todo.querySelector(".".concat(clNameList));
    this.clsLabel = clsLabel;
    this.clsCheck = clsCheck;
    this.cleanItem = this.getClearItem(idItem);
    this.keyLocalSt = 'todoData';
    this.addItem();
    this.removeItem();
    this.createList();
    this.changeStatus();
    this.editItem();
  }

}

;
const todo = new TodoApp('todoApp', 'list', 'clearItem', 'item__label', 'item__check');
//# sourceMappingURL=data:application/json;charset=utf8;base64,
